datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id           Int           @id @default(autoincrement())
    username     String        @unique
    password     String
    registertime DateTime      @default(now())
    permissions  Permissions?
    readhistory  ReadHistory[]
}

model Permissions {
    id       Int     @id @default(autoincrement())
    userid   Int     @unique
    user     User    @relation(fields: [userid], references: [id])
    read     Boolean @default(false)
    create   Boolean @default(false)
    admin    Boolean @default(false)
    disabled Boolean @default(false) // disabled account - handle at initial auth level
}

// existence of a ReadHistory record implies user read the given chapter
model ReadHistory {
    id        Int      @id @default(autoincrement())
    userid    Int
    user      User     @relation(fields: [userid], references: [id])
    chapterid Int
    chapter   Chapter  @relation(fields: [chapterid], references: [id])
    date      DateTime @default(now())
}

model Author {
    id    Int    @id @default(autoincrement())
    name  String @unique
    toons Toon[]
}

model Artist {
    id    Int    @id @default(autoincrement())
    name  String @unique
    toons Toon[]
}

model Genre {
    id    Int    @id @default(autoincrement())
    name  String @unique
    toons Toon[]
}

model Tag {
    id    Int    @id @default(autoincrement())
    name  String @unique
    toons Toon[]
}

model Toon {
    id        Int       @id @default(autoincrement())
    slug      String    @unique
    title     String
    alttitle  String?
    authors   Author[]
    artists   Artist[]
    genres    Genre[]
    tags      Tag[]
    status    Status    @default(ONGOING)
    summary   String
    published Boolean   @default(false)
    chapters  Chapter[]
    cover     Image?    @relation(fields: [coverid], references: [id])
    coverid   Int?
}

model Chapter {
    id          Int           @id @default(autoincrement())
    name        String
    date        DateTime
    toon        Toon          @relation(fields: [toonid], references: [id])
    toonid      Int
    order       Int // chapter number
    pages       Page[]
    readhistory ReadHistory[]
}

model Page {
    id        Int     @id @default(autoincrement())
    order     Int // page number
    chapter   Chapter @relation(fields: [chapterid], references: [id])
    chapterid Int
    image     Image   @relation(fields: [imageid], references: [id])
    imageid   Int
}

model Image {
    id        Int          @id @default(autoincrement())
    transport String       @unique @default(cuid())
    path      String
    status    UploadStatus @default(PENDING)
    toon      Toon[]
    page      Page[]
}

enum Status {
    ONGOING
    COMPLETED
    HIATUS
    DISCONTINUED
}

enum UploadStatus {
    PENDING
    UPLOADED
    FAILED
    DELETED
}
